package com.mycompany.pokemonbd;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author hiram
 */
public class UsuarioEditar extends javax.swing.JPanel implements ActionListener{
    public boolean pedirContraseña = false;
    private static String idEntrenador;
    BD mBD = new BD();
    public String ruta;
    public boolean imagen_nueva = false;
    

    public UsuarioEditar(String idEntrenador) {
        initComponents();
        this.idEntrenador = idEntrenador;
        cargarImagenPerfil();
        cargarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Agregar = new javax.swing.JPanel();
        imagen = new javax.swing.JPanel();
        perfil = new javax.swing.JLabel();
        titulo = new javax.swing.JLabel();
        nombre_label = new javax.swing.JLabel();
        IDEntrenador1 = new javax.swing.JTextField();
        id_label = new javax.swing.JLabel();
        id_texto = new javax.swing.JTextField();
        contraseñaA_label = new javax.swing.JLabel();
        actualizar = new javax.swing.JButton();
        contraseñaA_text = new javax.swing.JPasswordField();
        cargar = new javax.swing.JButton();
        contraseñaN_label = new javax.swing.JLabel();
        contraseñaN_text = new javax.swing.JPasswordField();
        eliminar = new javax.swing.JButton();
        contraseña_cambio = new javax.swing.JLabel();
        cambiar = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(1150, 690));

        Agregar.setBackground(new java.awt.Color(22, 26, 33));
        Agregar.setForeground(new java.awt.Color(22, 26, 33));
        Agregar.setMinimumSize(new java.awt.Dimension(548, 411));
        Agregar.setLayout(null);

        imagen.setBackground(new java.awt.Color(13, 17, 23));
        imagen.setForeground(new java.awt.Color(13, 17, 23));
        imagen.setLayout(null);
        imagen.add(perfil);
        perfil.setBounds(0, 0, 265, 265);

        Agregar.add(imagen);
        imagen.setBounds(50, 100, 265, 265);

        titulo.setFont(new java.awt.Font("Segoe UI", 1, 40)); // NOI18N
        titulo.setForeground(new java.awt.Color(255, 255, 255));
        titulo.setText("Editar Usuario");
        Agregar.add(titulo);
        titulo.setBounds(50, 30, 360, 54);

        nombre_label.setFont(new java.awt.Font("Segoe UI", 1, 21)); // NOI18N
        nombre_label.setForeground(new java.awt.Color(255, 255, 255));
        nombre_label.setText("Cambiar Nombre");
        Agregar.add(nombre_label);
        nombre_label.setBounds(350, 110, 180, 29);

        IDEntrenador1.setBackground(new java.awt.Color(13, 17, 23));
        IDEntrenador1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        IDEntrenador1.setForeground(new java.awt.Color(255, 255, 255));
        IDEntrenador1.setBorder(null);
        IDEntrenador1.setCaretColor(new java.awt.Color(255, 255, 255));
        IDEntrenador1.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        IDEntrenador1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDEntrenador1ActionPerformed(evt);
            }
        });
        Agregar.add(IDEntrenador1);
        IDEntrenador1.setBounds(350, 150, 730, 40);

        id_label.setFont(new java.awt.Font("Segoe UI", 1, 21)); // NOI18N
        id_label.setForeground(new java.awt.Color(255, 255, 255));
        id_label.setText("ID");
        Agregar.add(id_label);
        id_label.setBounds(350, 220, 140, 29);

        id_texto.setEditable(false);
        id_texto.setBackground(new java.awt.Color(13, 17, 23));
        id_texto.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        id_texto.setForeground(new java.awt.Color(204, 204, 204));
        id_texto.setBorder(null);
        id_texto.setCaretColor(new java.awt.Color(255, 255, 255));
        id_texto.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        id_texto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                id_textoActionPerformed(evt);
            }
        });
        Agregar.add(id_texto);
        id_texto.setBounds(350, 250, 560, 40);

        contraseñaA_label.setFont(new java.awt.Font("Segoe UI", 1, 21)); // NOI18N
        contraseñaA_label.setForeground(new java.awt.Color(255, 255, 255));
        contraseñaA_label.setText("Contraseña antigua");
        /*
        Agregar.add(contraseñaA_label);
        contraseñaA_label.setBounds(50, 480, 210, 29);
        */

        actualizar.setBackground(new java.awt.Color(35, 135, 55));
        actualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        actualizar.setForeground(new java.awt.Color(255, 255, 255));
        actualizar.setText("Actualizar datos");
        actualizar.addActionListener(this);
        Agregar.add(actualizar);
        actualizar.setBounds(740, 630, 400, 40);

        contraseñaA_text.setBackground(new java.awt.Color(13, 17, 23));
        contraseñaA_text.setForeground(new java.awt.Color(255, 255, 255));
        /*
        Agregar.add(contraseñaA_text);
        contraseñaA_text.setBounds(50, 520, 400, 40);
        */

        cargar.setBackground(new java.awt.Color(30, 112, 235));
        cargar.setForeground(new java.awt.Color(255, 255, 255));
        cargar.setText("Cargar imagen nueva");
        cargar.addActionListener(this);
        Agregar.add(cargar);
        cargar.setBounds(50, 380, 270, 30);

        contraseñaN_label.setFont(new java.awt.Font("Segoe UI", 1, 21)); // NOI18N
        contraseñaN_label.setForeground(new java.awt.Color(255, 255, 255));
        contraseñaN_label.setText("Contraseña nueva");
        /*
        Agregar.add(contraseñaN_label);
        contraseñaN_label.setBounds(620, 480, 180, 29);
        */

        contraseñaN_text.setBackground(new java.awt.Color(13, 17, 23));
        contraseñaN_text.setForeground(new java.awt.Color(255, 255, 255));
        /*
        Agregar.add(contraseñaN_text);
        contraseñaN_text.setBounds(620, 520, 400, 40);
        */

        eliminar.setBackground(new java.awt.Color(184, 44, 0));
        eliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        eliminar.setForeground(new java.awt.Color(255, 255, 255));
        eliminar.setText("Eliminar usuario");
        eliminar.addActionListener(this);
        Agregar.add(eliminar);
        eliminar.setBounds(40, 620, 160, 40);

        contraseña_cambio.setFont(new java.awt.Font("Segoe UI", 1, 21)); // NOI18N
        contraseña_cambio.setForeground(new java.awt.Color(255, 255, 255));
        contraseña_cambio.setText("¿Deseas cambiar la contraseña?");
        Agregar.add(contraseña_cambio);
        contraseña_cambio.setBounds(350, 310, 320, 29);

        cambiar.setBackground(new java.awt.Color(184, 44, 0));
        cambiar.setForeground(new java.awt.Color(255, 255, 255));
        cambiar.setText("Si");
        cambiar.addActionListener(this);
        Agregar.add(cambiar);
        cambiar.setBounds(350, 350, 110, 27);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 1150, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Agregar, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void IDEntrenador1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDEntrenador1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDEntrenador1ActionPerformed

    private void id_textoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_id_textoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_id_textoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Agregar;
    private javax.swing.JTextField IDEntrenador1;
    private javax.swing.JButton actualizar;
    private javax.swing.JButton cambiar;
    private javax.swing.JButton cargar;
    private javax.swing.JLabel contraseñaA_label;
    private javax.swing.JPasswordField contraseñaA_text;
    private javax.swing.JLabel contraseñaN_label;
    private javax.swing.JPasswordField contraseñaN_text;
    private javax.swing.JLabel contraseña_cambio;
    private javax.swing.JButton eliminar;
    private javax.swing.JLabel id_label;
    private javax.swing.JTextField id_texto;
    private javax.swing.JPanel imagen;
    private javax.swing.JLabel nombre_label;
    private javax.swing.JLabel perfil;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
    
    
    public void cargarImagenPerfil(){
        ArrayList imagenUser = mBD.cargarImagen(idEntrenador);
        if (mBD.conectar()) {
            byte[] datos = (byte[]) imagenUser.get(0);
            Image foto = new ImageIcon(datos).getImage();
            ImageIcon icono = new ImageIcon(foto.getScaledInstance(imagen.getWidth(),imagen.getHeight(),Image.SCALE_SMOOTH));
            perfil.setIcon(icono);
        }
    }

    public void cargarDatos(){
        ArrayList datos = mBD.obtenerDatos(idEntrenador);
        IDEntrenador1.setText((String) datos.get(0));
        id_texto.setText(idEntrenador);
    }

    public void cargarImagen() {
        JFileChooser archivos = new JFileChooser();
        FileNameExtensionFilter imagenes = new FileNameExtensionFilter("JPG, PNG & GIF", "jpg", "png", "gif");
        archivos.setFileFilter(imagenes);

        int respuesta = archivos.showOpenDialog(this);
        if (respuesta == archivos.APPROVE_OPTION) {
            ruta = archivos.getSelectedFile().getPath();

            Image foto = new ImageIcon(ruta).getImage();
            ImageIcon icono = new ImageIcon(foto.getScaledInstance(imagen.getWidth(), imagen.getHeight(), Image.SCALE_SMOOTH));
            perfil.setIcon(icono);
        }
    }

    public boolean comprobarContraseña(String contraseñaAntigua, String idEntrenador ){
        if(contraseñaAntigua.equals(mBD.getContraseña(idEntrenador))){
            return true;
        } else {
            return false;
        }
    }
    
    public void mostrar(){
        Agregar.add(contraseñaA_label);
        contraseñaA_label.setBounds(50, 480, 210, 29);
        
        Agregar.add(contraseñaA_text);
        contraseñaA_text.setBounds(50, 520, 400, 40);
        
        Agregar.add(contraseñaN_label);
        contraseñaN_label.setBounds(620, 480, 180, 29);
        
        Agregar.add(contraseñaN_text);
        contraseñaN_text.setBounds(620, 520, 400, 40);
        
        Agregar.repaint();
    }
    
    public void ocultar() {
        Agregar.remove(contraseñaA_label);
        Agregar.remove(contraseñaA_text);
        Agregar.remove(contraseñaN_label);
        Agregar.remove(contraseñaN_text);
        Agregar.repaint();
    }

    public void actualizarDatosNoImagenNoContraseña(){
        String nombre = IDEntrenador1.getText();
        String id = id_texto.getText();
        ImagenAlmacenEntrenador entrenador = new ImagenAlmacenEntrenador();
        entrenador.setID(Integer.parseInt(id));
        entrenador.setNombre(nombre);
        if (mBD.actualizarDatos(entrenador)) {
            ((Usuario) javax.swing.SwingUtilities.getWindowAncestor(this)).actualizarUsuarioExitoso();
            vaciarTexto();
        } else {
            ((Usuario) javax.swing.SwingUtilities.getWindowAncestor(this)).actualizarUsuarioError("El nombre "  +  nombre + " ya existe en la base de datos");
        }
    }

    public void actualizarDatosNoContraseña(){
        String nombre = IDEntrenador1.getText();
        String id = id_texto.getText();
        ImagenAlmacenEntrenador entrenador = new ImagenAlmacenEntrenador();
        entrenador.setID(Integer.parseInt(id));
        entrenador.setNombre(nombre);
        entrenador.setImagen(getImagen(ruta));
        if(mBD.actualizarDatosImagen(entrenador)) {
            ((Usuario) javax.swing.SwingUtilities.getWindowAncestor(this)).actualizarUsuarioExitoso();
            vaciarTexto();
        } else {
            ((Usuario) javax.swing.SwingUtilities.getWindowAncestor(this)).actualizarUsuarioError("El nombre "  +  nombre + " ya existe en la base de datos");
        }
    }

    public void actualizarDatosNoImagen(){
        String nombre = IDEntrenador1.getText();
        String contraseñaAntigua = contraseñaA_text.getText();
        if(!comprobarContraseña(contraseñaAntigua,idEntrenador)){
            ((Usuario) javax.swing.SwingUtilities.getWindowAncestor(this)).actualizarUsuarioError("La contraseña anterior no coincide con la contraseña del usuario");
            return;
        }
        String contraseñaNueva = contraseñaN_text.getText();

        String id = id_texto.getText();

        ImagenAlmacenEntrenador entrenador = new ImagenAlmacenEntrenador();
        entrenador.setID(Integer.parseInt(id));
        entrenador.setNombre(nombre);
        entrenador.setContraseña(contraseñaNueva);
        if(mBD.actualizarDatosContraseña(entrenador)) {
            ((Usuario) javax.swing.SwingUtilities.getWindowAncestor(this)).actualizarUsuarioExitoso();
            vaciarTexto();
        } else {
            ((Usuario) javax.swing.SwingUtilities.getWindowAncestor(this)).actualizarUsuarioError("El nombre "  +  nombre + " ya existe en la base de datos");
        }
    }

    public void actualizarDatos(){
        String nombre = IDEntrenador1.getText();
        String contraseñaAntigua = contraseñaA_text.getText();
        if(!comprobarContraseña(contraseñaAntigua,idEntrenador)){
            ((Usuario) javax.swing.SwingUtilities.getWindowAncestor(this)).actualizarUsuarioError("La contraseña anterior no coincide con la contraseña del usuario");
            return;
        }
        String contraseñaNueva = contraseñaN_text.getText();

        String id = id_texto.getText();

        ImagenAlmacenEntrenador entrenador = new ImagenAlmacenEntrenador();
        entrenador.setID(Integer.parseInt(id));
        entrenador.setNombre(nombre);
        entrenador.setContraseña(contraseñaNueva);
        entrenador.setImagen(getImagen(ruta));
        if(mBD.actualizarDatosContraseñaImagen(entrenador)) {
            ((Usuario) javax.swing.SwingUtilities.getWindowAncestor(this)).actualizarUsuarioExitoso();
            vaciarTexto();
        } else {
            ((Usuario) javax.swing.SwingUtilities.getWindowAncestor(this)).actualizarUsuarioError("El nombre "  +  nombre + " ya existe en la base de datos");
        }
    }

    public void actualizarEntrenador(){
        if(pedirContraseña == false && imagen_nueva == false){
            actualizarDatosNoImagenNoContraseña();
            return;
        }
        if(pedirContraseña == true && !imagen_nueva){
            actualizarDatosNoImagen();
            return;
        }
        if(pedirContraseña == false && imagen_nueva == true){
            actualizarDatosNoContraseña();
            return;
        }
        if(pedirContraseña == true && imagen_nueva == true){
            actualizarDatos();
        }
    }
    
    @Override
    public void actionPerformed(ActionEvent evt) {
        if(evt.getSource() == cambiar){
            if(pedirContraseña == false){
                cambiar.setText("No");
                cambiar.setBackground(new java.awt.Color(35,135,55));
                mostrar();
                pedirContraseña = true;
                return;
            }
            cambiar.setText("Si");
            cambiar.setBackground(new java.awt.Color(184,44,0));
            ocultar();
            pedirContraseña = false;
            return;
        } if(evt.getSource() == cargar) {
            cargarImagen();
            imagen_nueva = true;
        }
        if(evt.getSource() == actualizar) {
            actualizarEntrenador();
        } if(evt.getSource() == eliminar){
            mBD.eliminarEntrenador(idEntrenador);
            System.out.println("Se elimino el usuario de la base de datos");
            PInicio pInicio = new PInicio();
            pInicio.setVisible(true);
        }
    }
    
    
    public void vaciarTexto(){
        IDEntrenador1.setText("");
        id_texto.setText("");
        contraseñaA_text.setText("");
        contraseñaN_text.setText("");
        perfil.setIcon(null);
    }

    private byte[] getImagen(String ruta) {
        File imagen = new File(ruta);
        try {
            byte[] icono = new byte[(int) imagen.length()];
            InputStream input = new FileInputStream(imagen);
            input.read(icono);
            return icono;
        } catch (Exception e) {
            System.out.println(e);
            return null;
        }
    }
}
